package eu.pp.cashwizard.view.adapters;import android.content.Context;import android.graphics.Color;import android.graphics.drawable.Drawable;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.ArrayAdapter;import android.widget.ImageView;import android.widget.TextView;import androidx.core.content.ContextCompat;import java.util.HashSet;import java.util.List;import java.util.Set;import eu.pp.cashwizard.R;import eu.pp.cashwizard.model.Person;import eu.pp.cashwizard.util.AUtil;import eu.pp.cashwizard.util.JUtil;import eu.pp.cashwizard.view.model.PeopleChooseListRow;import lombok.NonNull;public class PeopleChooseListAdapter extends ArrayAdapter<PeopleChooseListRow> {    Context mContext = null;    public PeopleChooseListAdapter(@NonNull Context context, @NonNull List<PeopleChooseListRow> people ) {        super(context, 0, people );        mContext = context;    }    @Override    public View getView(int position, View convertView, ViewGroup parent) {        PeopleChooseListRow lr = getItem(position);        if (convertView == null) {            convertView = LayoutInflater.from(getContext()).inflate(R.layout.row_people_choose_list, parent, false);        }        ImageView picture = (ImageView) convertView.findViewById(R.id.lrPeopleChoosePicture);        TextView nickName = (TextView) convertView.findViewById(R.id.lrPeopleChooseNickName);        //Drawable background = convertView.getBackground();        int color = ContextCompat.getColor(mContext, R.color.listSelected);        if( lr.isChecked() ) {            //background.setAlpha(100);            convertView.setBackgroundColor( color );        }        else {            //background.setAlpha(0);            convertView.setBackground(null);        }        nickName.setText( lr.person.getNickName() );        if( lr.person.hasPhoto() ) picture.setImageBitmap( AUtil.getBitmapFromName( lr.person.getPhotoFullPath() ) );        else {            if( lr.person.isMale() ) picture.setImageDrawable( getContext().getDrawable( R.drawable.man ) );            else picture.setImageDrawable( getContext().getDrawable( R.drawable.woman ) );        }        return convertView;    }    public void unselectOthers( PeopleChooseListRow selected ) {        PeopleChooseListRow lr;        for( int i=0; i<this.getCount(); i++ ) {            lr = this.getItem( i );            if( !lr.equals( selected ) && lr.isChecked() ) lr.setChecked( false );        }    }    public Person getSelectedPerson() {        PeopleChooseListRow lr;        for( int i=0; i<this.getCount(); i++ ) {            lr = this.getItem( i );            if( lr.isChecked() ) return lr.person;        }        return null;    }    public boolean isAtLeastOneSelected() {        PeopleChooseListRow lr;        for( int i=0; i<this.getCount(); i++ ) {            lr = this.getItem( i );            if( lr.isChecked() ) return true;        }        return false;    }    public Set<Person> getSelectedPersonsSet() {        Set<Person> persons = new HashSet<>();        PeopleChooseListRow lr;        for( int i=0; i<this.getCount(); i++ ) {            lr = this.getItem( i );            if( lr.isChecked() ) persons.add( lr.person );        }        return persons;    }}